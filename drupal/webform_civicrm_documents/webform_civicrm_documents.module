<?php

require_once 'WebformCiviCRMDocuments.inc';

function webform_civicrm_documents_webform_submission_insert($node, $submission) {
  $d = new WebformCiviCRMDocuments($node->nid, $submission->sid);
  $d->saveDocuments();
}

function webform_civicrm_documents_webform_submission_update($node, $submission) {
  $d = new WebformCiviCRMDocuments($node->nid, $submission->sid);
  $d->saveDocuments();
}

function webform_civicrm_documents_form_webform_component_edit_form_alter(&$form, &$form_state) {
  $component = $form_state['build_info']['args'][1];
  if (!in_array($component['type'], array('file', 'multifile'))) {
    return;
  }
  
  if (!isset($form['#node']->webform_civicrm)) {
    return;
  }
  
  $form['webform_civicrm_documents'] = array(
    '#type' => 'fieldset',
    '#title' => t('CiviCRM Documents'),
    '#weight' => 10,
  );
  $form['webform_civicrm_documents']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save this file as a document in civicrm'),
    '#description' => t("The file is saved as document in civicrm by its name"),
    '#default_value' => _webform_civicrm_documents_get_enabled($component),
  );
  $form['webform_civicrm_documents']['existing'] = array(
    '#type' => 'select',
    '#title' => t('What to do when document already exist'),
    '#options' => array('new_version' => t('Upload new version'), 'new_document' => t('Create new document')),
    '#default_value' => _webform_civicrm_documents_get_existing($component),
    '#states' => array(
      'invisible' => array(
        ':input[name="webform_civicrm_documents[enabled]"]' => array('checked' => false),
      ),
    ),
  );
  $contact_options = array();
  foreach($form['#node']->webform_civicrm['data']['contact'] as $key => $contact) {
    $contact_options[$key] = $contact['contact'][1]['webform_label'];
  }
  $form['webform_civicrm_documents']['contact'] = array(
    '#type' => 'select',
    '#title' => t('Upload for contact(s)'),
    '#options' => $contact_options,
    '#multiple' => true,
    '#default_value' => _webform_civicrm_documents_get_contact($component),
    '#states' => array(
      'invisible' => array(
        ':input[name="webform_civicrm_documents[enabled]"]' => array('checked' => false),
      ),
    ),
  );

  $form['#submit'][] = 'webform_civicrm_documents_submit';
}

/**
 * Submit handler for altering file attachment.
 */
function webform_civicrm_documents_submit($form, &$form_state) {
  $component = $form_state['build_info']['args'][1];

  $webformCids = CRM_Utils_Array::collect('cid', $form['#node']->webform['components']);
  $formKeys = CRM_Utils_Array::collect('form_key', $form['#node']->webform['components']);
  $weights = CRM_Utils_Array::collect('weight', $form['#node']->webform['components']);

  $subjectFormKey = "{$component['form_key']}_file_subject";
  $subjectLabel = "File Subject ({$component['name']})";
  $comp = array(
    'label' => $subjectLabel,
    'description' => t('File Subject.'),
    'nid' => $component['nid'],
    'cid' => max($webformCids) + 1,
    'type' => 'textfield',
    'form_key' => $subjectFormKey,
    'pid' => $component['pid'],
    'name' => $subjectLabel,
    'weight' => max($weights) + 1,
  );
  if (!empty($form_state['values']['webform_civicrm_documents']['enabled'])) {
    if (!in_array($subjectFormKey, $formKeys)) {
      webform_component_insert($comp);
    }
  }
  elseif (in_array($subjectFormKey, $formKeys)) {
    foreach ($form['#node']->webform['components'] as $key => $values) {
      if ($values['form_key'] == $subjectFormKey) {
        $comp['cid'] = $values['cid'];
        $comp['weight'] = $values['weight'];
      }
    }
    webform_component_delete($form['#node'], $comp);
  }
}

function webform_civicrm_documents_webform_component_presave(&$component) {
  if (!isset($component['webform_civicrm_documents']['enabled'])) {
    return;
  }
  $component['extra']['webform_civicrm_documents_enabled'] = $component['webform_civicrm_documents']['enabled'] ? true : false;
  $component['extra']['webform_civicrm_documents_existing'] = $component['webform_civicrm_documents']['existing'];
  $component['extra']['webform_civicrm_documents_contacts'] = serialize($component['webform_civicrm_documents']['contact']);
}

function _webform_civicrm_documents_get_enabled(array $component) {
  $enabled = false;
  if (isset($component['extra']['webform_civicrm_documents_enabled'])) {
    $enabled = (bool) $component['extra']['webform_civicrm_documents_enabled'];
  }
  return $enabled;
}

function _webform_civicrm_documents_get_contact(array $component) {
  $contacts = array();
  if (!empty($component['extra']['webform_civicrm_documents_contacts'])) {
    $contacts = unserialize($component['extra']['webform_civicrm_documents_contacts']);
  }
  return $contacts;
}

function _webform_civicrm_documents_get_existing(array $component) {
  $existing = false;
  if (isset($component['extra']['webform_civicrm_documents_existing'])) {
    $existing = $component['extra']['webform_civicrm_documents_existing'];
  }
  return $existing;
}

function webform_civicrm_documents_enable() {
  $maxWeight = db_query("SELECT MAX(weight) FROM {system} where type = 'module' AND (name = 'webform_civicrm') ")->fetchField();
  $maxWeight++;

  //make sure that our module has a higher weight than the civicrm and civicrm_entity module
  //if not our changes to the available fields for views wont occur
  //because the hook should be runned after the civicrm and civcirm_entity has runned their relevant hooks
  db_update('system')
      ->fields(array('weight' => $maxWeight))
      ->condition('type', 'module')
      ->condition('name', 'webform_civicrm_documents')
      ->execute();
}